-- Setup. DO NOT REMOVE.
.headers on
.separator ','

DROP TABLE IF EXISTS sets;
DROP TABLE IF EXISTS themes;
DROP TABLE IF EXISTS parts;
DROP VIEW IF EXISTS top_level_themes;
DROP VIEW IF EXISTS sets_years;
DROP TABLE IF EXISTS parts_fts;


-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]

CREATE TABLE sets(
	set_num text,
	name text,
	year integer,
	theme_id integer,
	num_parts integer
);

CREATE TABLE themes(
	id integer,
	name text,
	parent_id integer
);

CREATE TABLE parts(
	part_num text,
	name text,
	part_cat_id integer,
	part_material_id integer
);


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]

.import data/sets.csv sets
.import data/themes.csv themes
.import data/parts.csv parts


-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.headers off
SELECT COUNT(*) FROM sets;
SELECT COUNT(*) FROM parts;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]

CREATE INDEX sets_index ON sets (set_num);
CREATE INDEX parts_index ON parts (part_num);
CREATE INDEX themes_index ON themes (id);


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c.i) Create the top_level themes VIEW

-- [insert your SQL statement(s) BELOW this line]

CREATE VIEW top_level_themes
AS
SELECT id, name
FROM themes
WHERE parent_id = '';

-- -- [insert your SQL statement(s) ABOVE this line]

-- -- [the following statement(s) are for autograding. DO NOT REMOVE.]

-- .headers off
-- PRAGMA table_info(top_level_themes);
-- .headers on
-- .print '~~~~~'

-- -- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- -- (c.ii) count the top level themes in the top_level_themes view.

-- -- [insert your SQL statement(s) BELOW this line]

SELECT count(*) AS count FROM top_level_themes;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Finding top level themes with the most sets.

-- [insert your SQL statement(s) BELOW this line]

SELECT top_level_themes.name AS theme, 
	   count(theme_id) AS num_sets 
FROM top_level_themes, sets 
WHERE theme_id = id
GROUP BY id
ORDER BY num_sets DESC
LIMIT 10;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Calculate a percentage

-- [insert your SQL statement(s) BELOW this line]

SELECT top_level_themes.name AS theme,
 	   round(100.0 * count(id)/
 	   (SELECT sum(num_sets) FROM 
 	   (SELECT top_level_themes.name AS theme,
 	   		   count(theme_id) AS num_sets
 	   FROM top_level_themes, sets
 	   WHERE theme_id = id 
 	   GROUP BY id
 	   ORDER BY num_sets DESC)),2) AS percentage 
FROM top_level_themes INNER JOIN sets 
ON theme_id = id
GROUP BY id
HAVING percentage >= 5.0
ORDER BY percentage DESC;



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Summarize a sub-theme

-- [insert your SQL statement(s) BELOW this line]

SELECT themes.name AS sub_theme, COUNT (theme_id) AS num_sets
FROM themes INNER JOIN sets
ON theme_id = id
WHERE parent_id = 186
GROUP BY theme_id
ORDER BY num_sets DESC, sub_theme;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g.i.) Create the sets VIEW

-- [insert your SQL statement(s) BELOW this line]

CREATE VIEW sets_years
AS
SELECT ROWID, year, COUNT(year) AS sets_count
FROM sets
GROUP BY year;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.headers off
PRAGMA table_info(sets_years);
SELECT AVG(sets_count) FROM sets_years;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g.ii) Find the running total of sets in the Rebrickable database each year

-- [insert your SQL statement(s) BELOW this line]

SELECT year, 
	   (SELECT SUM(sets_count) 
	   	FROM sets_years
	   	WHERE (year <= a.year)) AS running_total
FROM sets_years AS a 
GROUP BY year 
ORDER BY year;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Create the FTS table and import data.

-- [insert your SQL statement(s) BELOW this line]

CREATE VIRTUAL TABLE parts_fts USING fts3(
	part_num text,
	name text,
	part_cat_id integer,
	part_material_id integer
);

.import data/parts.csv parts_fts
 

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.headers off
PRAGMA table_info(parts_fts);
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h.i) Count the number of unique parts whose name field begins with the prefix ‘mini’.

-- [insert your SQL statement(s) BELOW this line]

SELECT COUNT(*)
AS count_overview
FROM parts_fts
WHERE name MATCH 'mini*';


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h.ii) List the part_num’s of the unique parts that contain the terms ‘minidoll’ and ‘boy’ in the name field with no more than 5 intervening terms.

-- [insert your SQL statement(s) BELOW this line]

SELECT part_num AS part_num_boy_minidoll
FROM parts_fts
WHERE parts_fts.name MATCH 'minidoll NEAR/5 boy';


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h.iii) List the part_num’s of the unique parts that contain the terms ‘minidoll’ and ‘girl’ in the name field with no more than 5 intervening terms.

-- [insert your SQL statement(s) BELOW this line]

SELECT part_num AS part_num_girl_minidoll
FROM parts_fts
WHERE parts_fts.name MATCH 'minidoll NEAR/5 girl';



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --